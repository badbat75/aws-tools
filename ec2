#!/bin/bash
CMD_PATH=$(dirname $(realpath ${0}))

if [ -f ${CMD_PATH}/ec2.conf ]; then
	source ${CMD_PATH}/ec2.conf
fi

EC2_SSH_KEY=${EC2_SSH_KEY:-"defaultkey-pem"}
EC2_USER=${EC2_USER:-"ubuntu"}

EC2_CMD=${1}
shift
if [ "${@}x" != "x" ]; then
	INSTANCE_IDS=${@}
else
	if [ -z ${INSTANCE_IDS} ] && [ "x${EC2_CMD}" != "xrun" ]; then
		echo  "Error: no INSTANCE_IDS specified"
		exit 1
	fi
fi

unset IPADDR CONN_STATUS EC2_STATE

function wait_for_ready () {
		echo -n "Starting."
		FIRSTLOOP=1
		while [ "${IPADDR}" == "" ]
		do
			[ ${FIRSTLOOP} -ne 1 ] && sleep 2
			IPADDR=$(aws ec2 describe-instances --instance-ids ${INSTANCE_IDS} --query 'Reservations[].Instances[].PublicIpAddress[]' --output=text)
			echo -n "."
			FIRSTLOOP=0
		done
		echo -n "IP: ${IPADDR} ."
		FIRSTLOOP=1
		while [ "${EC2_STATE}" != "running" ]
		do
			[ ${FIRSTLOOP} -ne 1 ] && sleep 2
			EC2_STATE=$(aws ec2 describe-instances --instance-ids ${INSTANCE_IDS} --query 'Reservations[].Instances[].State[].Name[]' --output=text)
			#echo "State: ${EC2_STATE}"
			echo -n "."
			FIRSTLOOP=0
		done
		echo "Started."
		echo -n "Waiting for SSH get started."
		FIRSTLOOP=1
		while [ "${CONN_STATUS}" != "OK" ]
		do
			[ ${FIRSTLOOP} -ne 1 ] && sleep 2
			CONN_STATUS="$(ssh -i ${EC2_SSH_KEY} -o StrictHostKeyChecking=no -o ConnectTimeout=1 ${EC2_USER}@${IPADDR} "echo OK" 2>/dev/null)"
			echo -n "."
			FIRSTLOOP=0
		done
		echo "Started."
		echo
		echo "ssh -i ${EC2_SSH_KEY}  -o StrictHostKeyChecking=no ubuntu@${IPADDR}"
}

case ${EC2_CMD} in
	run)
		echo -n "Creating instance "
		INSTANCE_IDS=$(eval 'aws ec2 run-instances --image-id '${AMIID}' --count 1 --instance-type '${INSTANCETYPE}' --key-name '${EC2_SSH_KEY_NAME}' --security-group-ids '${SGIDs}' --block-device-mappings "[{\"DeviceName\":\"/dev/sdb\",\"Ebs\":{\"SnapshotId\":\"'${DATAVOLUMEID}'\"}}]" --tag-specifications "ResourceType=instance,Tags=[{Key=build,Value=arm}]" --query "Instances[].InstanceId[]" --output=text')
		echo "${INSTANCE_IDS} ."
		wait_for_ready
	;;
	start)
		aws ec2 start-instances --instance-ids ${INSTANCE_IDS} --output=text > /dev/null
		wait_for_ready
	;;
	stop)
		echo -n "Stopping instance."
		IPADDR=$(aws ec2 describe-instances --instance-ids ${INSTANCE_IDS} --query 'Reservations[].Instances[].PublicIpAddress[]' --output=text)
		ssh -i ${EC2_SSH_KEY} -o "StrictHostKeyChecking=no" ${EC2_USER}@${IPADDR} "sudo poweroff" 2>/dev/null
		FIRSTLOOP=1
		while [ "${EC2_STATE}" != "stopped" ]
		do
			[ ${FIRSTLOOP} -ne 1 ] && sleep 2
			EC2_STATE=$(aws ec2 describe-instances --instance-ids ${INSTANCE_IDS} --query 'Reservations[].Instances[].State[].Name[]' --output=text)
			#echo "State: ${EC2_STATE}"
			echo -n "."
			FIRSTLOOP=0
		done
		echo "Stopped."
	;;
	terminate)
		echo -n "Terminating instance."
		aws ec2 terminate-instances --instance-ids ${INSTANCE_IDS} --output=text > /dev/null
		FIRSTLOOP=1
		while [ "${EC2_STATE}" != "terminated" ]
		do
			[ ${FIRSTLOOP} -ne 1 ] && sleep 2
			EC2_STATE=$(aws ec2 describe-instances --instance-ids ${INSTANCE_IDS} --query 'Reservations[].Instances[].State[].Name[]' --output=text)
			#echo "State: ${EC2_STATE}"
			echo -n "."
			FIRSTLOOP=0
		done
		echo "Terminated."
	;;
	*)
		echo "run, start, stop or terminate?"
	;;
esac
